#!/usr/bin/env python3
"""
GitHub PR Checker Script
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–º–µ—Ä PR –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ epic PR
"""

import argparse
import sys
from typing import List, Dict, Optional
from github import Github, GithubException


class PRType:
    FEATURE = ("feature", 300)
    REFACTOR = ("refactor", 400)
    BUGFIX = ("bugfix", 150)
    EPIC = ("epic", None)


def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description='GitLab MR Checker - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ MR –∏ —Ä–∞–±–æ—Ç–∞ —Å epic'
    )
    parser.add_argument(
        '--token',
        required=True,
        help='GitHub Access Token'
    )
    parser.add_argument(
        '--repo',
        required=True,
        help='Repository –≤ —Ñ–æ—Ä–º–∞—Ç–µ owner/repo (–Ω–∞–ø—Ä–∏–º–µ—Ä: username/calculator)'
    )
    parser.add_argument(
        '--list-members',
        action='store_true',
        help='–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞'
    )
    parser.add_argument(
        '--mr-iid',
        required=True,
        type=int,
        help='IID —Ç–µ–∫—É—â–µ–≥–æ Merge Request'
    )
    parser.add_argument(
        '--check-size',
        action='store_true',
        help='–ü—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–∞–∑–º–µ—Ä MR'
    )
    
    return parser.parse_args()

def get_mr_type(branch_name: str) -> tuple:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø MR –ø–æ –∏–º–µ–Ω–∏ –≤–µ—Ç–∫–∏
    
    Args:
        branch_name: –ò–º—è –≤–µ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: feature/my-feature)
    
    Returns:
        tuple: (—Ç–∏–ø, –ª–∏–º–∏—Ç_—Å—Ç—Ä–æ–∫)
    """
    branch_lower = branch_name.lower()
    
    if 'epic/' in branch_lower:
        return MRType.EPIC
    elif 'feature/' in branch_lower:
        return MRType.FEATURE
    elif 'refactor/' in branch_lower:
        return MRType.REFACTOR
    elif 'bugfix/' in branch_lower or 'fix/' in branch_lower:
        return MRType.BUGFIX
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º feature
        return MRType.FEATURE

def list_project_members(gh, repo_name: str):
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∏—Ö —Ä–æ–ª–∏
    
    Args:
        gh: GitHub connection object
        repo_name: –ò–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (owner/repo)
    """
    print("\n" + "=" * 60)
    print("–°–ü–ò–°–û–ö –£–ß–ê–°–¢–ù–ò–ö–û–í –ü–†–û–ï–ö–¢–ê")
    print("=" * 60)
    
    try:
        repo = gh.get_repo(repo_name)
        collaborators = repo.get_collaborators()
        
        members_list = list(collaborators)
        
        if not members_list:
            print("–£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        for member in members_list:
            permission = repo.get_collaborator_permission(member)
            
            print(f"\n{member.name or member.login} (@{member.login})")
            print(f"   Email: {member.email or 'N/A'}")
            print(f"   –†–æ–ª—å: {permission}")
            print(f"   Profile: {member.html_url}")
        
        print("\n" + "=" * 60)
        print(f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(members_list)}")
        print("=" * 60 + "\n")
        
    except GithubException as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
        sys.exit(1)

def check_mr_size(gl, project_id: int, mr_iid: int):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–º–µ—Ä MR –∏ –ø–∞–¥–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
    
    Args:
        gl: GitLab connection object
        project_id: ID –ø—Ä–æ–µ–∫—Ç–∞
        mr_iid: IID merge request
    """
    print("\n" + "=" * 60)
    print("–ü–†–û–í–ï–†–ö–ê –†–ê–ó–ú–ï–†–ê MERGE REQUEST")
    print("=" * 60)
    
    try:
        project = gl.projects.get(project_id)
        mr = project.mergerequests.get(mr_iid)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ MR
        source_branch = mr.source_branch
        target_branch = mr.target_branch
        title = mr.title
        
        print(f"\nüìã MR Info:")
        print(f"   Title: {title}")
        print(f"   Source: {source_branch}")
        print(f"   Target: {target_branch}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø MR
        mr_type, line_limit = get_mr_type(source_branch)
        print(f"   Type: {mr_type[0]}")
        
        # –î–ª—è epic MR –Ω–µ—Ç –ª–∏–º–∏—Ç–∞
        if mr_type == MRType.EPIC:
            print(f"Epic MR - –ª–∏–º–∏—Ç —Å—Ç—Ä–æ–∫ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è")
            print("=" * 60 + "\n")
            return
        
        print(f"   Limit: {line_limit} lines")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        changes = mr.changes()
        total_lines = 0
        
        print(f"\nüìä Changed files:")
        for change in changes['changes']:
            file_path = change['new_path']
            diff = change['diff']
            
            # –°—á–∏—Ç–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∏ —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            added = diff.count('\n+')
            removed = diff.count('\n-')
            file_lines = added + removed
            total_lines += file_lines
            
            print(f"   {file_path}: +{added} -{removed} (total: {file_lines})")
        
        print(f"\nüìà Total changes: {total_lines} lines")
        print(f"   Limit: {line_limit} lines")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if total_lines > line_limit:
            print(f"\nFAILED: MR —Ä–∞–∑–º–µ—Ä {total_lines} —Å—Ç—Ä–æ–∫ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç {line_limit} –¥–ª—è —Ç–∏–ø–∞ '{mr_type[0]}'")
            print("=" * 60 + "\n")
            sys.exit(1)
        else:
            print(f"\nPASSED: MR —Ä–∞–∑–º–µ—Ä –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞")
            print("=" * 60 + "\n")
    
    except gitlab.exceptions.GitlabGetError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è MR: {e}")
        sys.exit(1)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    args = parse_arguments()
    
    print(f"Repository: {args.repo}")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ GitHub
    try:
        gh = Github(args.token)
        user = gh.get_user()
        print(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitHub (user: {user.login})")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GitHub: {e}")
        sys.exit(1)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    if args.list_members:
        list_project_members(gh, args.repo)


if __name__ == "__main__":
    main()