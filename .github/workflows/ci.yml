name: Calculator CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'epic/**'
      - 'feature/**'
      - 'bugfix/**'
      - 'refactor/**'
  pull_request:
    branches:
      - main
      - develop
      - 'epic/**'

env:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

jobs:
  # ============================================
  # STAGE 1: Checkstyle + GitHub API
  # ============================================
  checkstyle:
    name: Stage 1 - Code Quality & PR Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyGithub requests
      
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      - name: Run Checkstyle
        run: |
          echo "–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ (Checkstyle)..."
          ./gradlew checkstyleMain checkstyleTest
      
      - name: List team members
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã..."
          python3 scripts/check_pr.py \
            --token "$GITHUB_TOKEN" \
            --repo "${{ github.repository }}" \
            --pr-number "${{ github.event.pull_request.number }}" \
            --list-members
      
      - name: Check PR size
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üìè –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ PR..."
          python3 scripts/check_pr.py \
            --token "$GITHUB_TOKEN" \
            --repo "${{ github.repository }}" \
            --pr-number "${{ github.event.pull_request.number }}" \
            --check-size
      
      - name: Update epic PR description
        if: github.event_name == 'pull_request' && contains(github.head_ref, 'epic/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è epic PR..."
          python3 scripts/check_pr.py \
            --token "$GITHUB_TOKEN" \
            --repo "${{ github.repository }}" \
            --pr-number "${{ github.event.pull_request.number }}" \
            --update-epic
      
      - name: Upload Checkstyle reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkstyle-reports
          path: build/reports/checkstyle/
          retention-days: 1

  build:
    name: Stage 2 - Build Application
    runs-on: ubuntu-latest
    needs: checkstyle
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'
      
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      - name: Build with Gradle
        run: |
          echo "–ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
          ./gradlew build -x test
      
      - name: Build Fat JAR
        run: |
          echo "–°–æ–∑–¥–∞–Ω–∏–µ fat JAR —Ñ–∞–π–ª–∞..."
          ./gradlew fatJar
      
      - name: List build artifacts
        run: |
          echo "–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å–±–æ—Ä–∫–∏:"
          ls -lah build/libs/
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            build/libs/*.jar
            build/distributions/
          retention-days: 30
      
      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: build/reports/tests/
          retention-days: 7

  tests:
    name: Stage 3 - Unit Tests
    runs-on: ubuntu-latest
    needs: checkstyle
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'
      
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      - name: Run tests
        run: |
          echo "–ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤..."
          ./gradlew test
      
      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: build/reports/tests/
          retention-days: 7
  publish:
    name: Stage 4 - Publish Build
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build/libs/

      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "–°–æ–∑–¥–∞–Ω–∏–µ GitHub Release –¥–ª—è main..."
          VERSION=$(date +%Y%m%d)-$(git rev-parse --short HEAD)
          gh release create "v$VERSION" \
            --title "Release v$VERSION" \
            --notes "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–ª–∏–∑ –¥–ª—è –∫–æ–º–º–∏—Ç–∞ $(git rev-parse --short HEAD)" \
            build/libs/*.jar \
            --repo "${{ github.repository }}"

      - name: Publish to Internal Repository
        env:
          REPO_URL: ${{ secrets.INTERNAL_REPO_URL }}
          REPO_USER: ${{ secrets.INTERNAL_REPO_USER }}
          REPO_PASS: ${{ secrets.INTERNAL_REPO_PASS }}
        run: |
          echo "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π..."
          ./gradlew publish -PrepoUrl=$REPO_URL -PrepoUser=$REPO_USER -PrepoPass=$REPO_PASS